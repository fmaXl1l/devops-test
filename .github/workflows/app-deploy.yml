name: Application CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - 'k8s/**'
      - 'Dockerfile'
      - 'pyproject.toml'
      - '.github/workflows/app-deploy.yml'
  
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - 'Dockerfile'
      - 'pyproject.toml'
      - '.github/workflows/app-deploy.yml'
  
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  IMAGE_NAME: devops-microservice
  NAMESPACE: devops-microservice

permissions:
  contents: read
  security-events: write

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Install Dependencies
      run: uv sync
    
    - name: Lint with Black
      run: uv run black --check --diff src/ tests/
    
    - name: Lint with Ruff
      run: uv run ruff check src/ tests/
    
    - name: Run Tests with Coverage
      run: |
        uv run pytest --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=90
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      if: github.event_name == 'push'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build & Push
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Login to Azure Container Registry
      run: |
        ACR_NAME=$(echo "${{ secrets.ACR_LOGIN_SERVER }}" | cut -d'.' -f1)
        az acr login --name $ACR_NAME
    
    - name: Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      continue-on-error: true
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: sbom
        path: sbom.spdx.json
        retention-days: 30

  deploy:
    name: Deploy to AKS
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Configure kubectl
      run: |
        az aks get-credentials \
          --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
          --name ${{ secrets.AKS_CLUSTER_NAME }} \
          --overwrite-existing
    
    - name: Verify AKS Connection
      run: |
        kubectl cluster-info
        kubectl get nodes
    
    - name: Store Current Deployment for Rollback
      id: current-deployment
      run: |
        # Get current image if deployment exists
        if kubectl get deployment devops-microservice -n ${{ env.NAMESPACE }} &> /dev/null; then
          CURRENT_IMAGE=$(kubectl get deployment devops-microservice -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}')
          echo "current-image=$CURRENT_IMAGE" >> $GITHUB_OUTPUT
          echo "Current image: $CURRENT_IMAGE"
        else
          echo "current-image=none" >> $GITHUB_OUTPUT
          echo "No existing deployment found"
        fi
    
    - name: Update Secret with JWT Key
      run: |
        # Create or update the secret with the JWT key
        kubectl create secret generic devops-microservice-secret \
          --from-literal=JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
          --namespace=${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Apply Kubernetes Manifests
      run: |
        kubectl apply -f k8s/01-namespace.yaml
        kubectl apply -f k8s/02-secret.yaml
        kubectl apply -f k8s/03-configmap.yaml
        kubectl apply -f k8s/05-service.yaml
        kubectl apply -f k8s/06-hpa.yaml
    
    - name: Update Deployment with New Image
      run: |
        # Update the deployment manifest with the new image
        NEW_IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        sed -i "s|image: devops-microservice:latest|image: $NEW_IMAGE|g" k8s/04-deployment.yaml
        
        # Apply the updated deployment
        kubectl apply -f k8s/04-deployment.yaml
    
    - name: Wait for Rollout Completion
      id: rollout
      run: |
        echo "Waiting for deployment rollout to complete..."
        if kubectl rollout status deployment/devops-microservice -n ${{ env.NAMESPACE }} --timeout=300s; then
          echo "rollout-success=true" >> $GITHUB_OUTPUT
          echo "Deployment rollout completed successfully"
        else
          echo "rollout-success=false" >> $GITHUB_OUTPUT
          echo "Deployment rollout failed"
          exit 1
        fi
    
    - name: Health Check
      id: health-check
      run: |
        echo "Performing health check..."
        sleep 30  # Wait for pods to be ready
        
        # Get service endpoint
        EXTERNAL_IP=""
        for i in {1..20}; do
          EXTERNAL_IP=$(kubectl get service devops-microservice-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [[ -n "$EXTERNAL_IP" ]]; then
            break
          fi
          echo "Waiting for external IP... ($i/20)"
          sleep 15
        done
        
        if [[ -z "$EXTERNAL_IP" ]]; then
          echo "health-check-success=false" >> $GITHUB_OUTPUT
          echo "Failed to get external IP"
          exit 1
        fi
        
        # Test health endpoint
        if curl -f "http://$EXTERNAL_IP/health" --max-time 30; then
          echo "health-check-success=true" >> $GITHUB_OUTPUT
          echo "Health check passed"
        else
          echo "health-check-success=false" >> $GITHUB_OUTPUT
          echo "Health check failed"
          exit 1
        fi
    
    - name: Get Load Balancer IP
      id: get-lb-ip
      if: steps.health-check.outputs.health-check-success == 'true'
      run: |
        LB_IP=$(kubectl get service devops-microservice-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "load_balancer_ip=$LB_IP" >> $GITHUB_OUTPUT
        echo "Application deployed at: http://$LB_IP"
    
    - name: Deployment Summary
      if: steps.health-check.outputs.health-check-success == 'true'
      run: |
        echo "## Deployment Successful ✅" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Application Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace**: ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Load Balancer IP**: ${{ steps.get-lb-ip.outputs.load_balancer_ip }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check**: ✅ Passed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Endpoints:" >> $GITHUB_STEP_SUMMARY
        echo "- **Health**: http://${{ steps.get-lb-ip.outputs.load_balancer_ip }}/health" >> $GITHUB_STEP_SUMMARY
        echo "- **Generate Token**: http://${{ steps.get-lb-ip.outputs.load_balancer_ip }}/generate-token" >> $GITHUB_STEP_SUMMARY
        echo "- **DevOps API**: http://${{ steps.get-lb-ip.outputs.load_balancer_ip }}/DevOps" >> $GITHUB_STEP_SUMMARY

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && needs.deploy.outputs.current-image != 'none'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Configure kubectl
      run: |
        az aks get-credentials \
          --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} \
          --name ${{ secrets.AKS_CLUSTER_NAME }} \
          --overwrite-existing
    
    - name: Rollback Deployment
      run: |
        echo "Rolling back to previous image: ${{ needs.deploy.outputs.current-image }}"
        kubectl set image deployment/devops-microservice \
          devops-microservice=${{ needs.deploy.outputs.current-image }} \
          -n ${{ env.NAMESPACE }}
        
        # Wait for rollback to complete
        kubectl rollout status deployment/devops-microservice -n ${{ env.NAMESPACE }} --timeout=300s
    
    - name: Verify Rollback
      run: |
        echo "Verifying rollback..."
        sleep 30
        
        # Get current image after rollback
        CURRENT_IMAGE=$(kubectl get deployment devops-microservice -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.template.spec.containers[0].image}')
        echo "Current image after rollback: $CURRENT_IMAGE"
        
        # Basic health check
        kubectl get pods -n ${{ env.NAMESPACE }}
        kubectl get deployment devops-microservice -n ${{ env.NAMESPACE }}
    
    - name: Rollback Summary
      run: |
        echo "## Deployment Failed - Rollback Completed 🔄" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The deployment failed and has been rolled back to the previous version." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Rollback Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous Image**: ${{ needs.deploy.outputs.current-image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Failed Image**: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace**: ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY